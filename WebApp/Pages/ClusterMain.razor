@page "/Cluster"
@inject ILogger<ClusterMain> logger
@inject ISnackbar Snackbar

<MudUnitAndReferenceChoiceTag HttpHost=@APIUtils.HostNameUnitConversion
                              HttpBasePath=@APIUtils.HostBasePathUnitConversion
                              HttpController="UnitSystem/"
                              UnitSystemName="@DataUtils.UnitAndReferenceParameters.UnitSystemName"
                              UnitSystemNameChanged="@DataUtils.UpdateUnitSystemName"
                              PositionReferenceName="WGS84"
                              CartographicGridPositionReferenceSource="_cartographicReference"
                              ClusterPositionReferenceSource="_clusterReference"
                              >
    @if (clusterList == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div hidden="@isHiddenMainPanel">
            <MudDataGrid T="Cluster" MultiSelection="true" Items="@clusterList" SelectedItemsChanged="@SelectedItemsChanged"
                         EditMode="DataGridEditMode.Cell"
                         Hover="true" RowClick="@RowClicked"
                         SortMode="SortMode.Multiple" QuickFilter="@_clusterFilter" Filterable="false"
                         ReadOnly="false" ColumnResizeMode="ResizeMode.Column" Elevation="0">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Cluster</MudText>
                    <MudButton OnClick="@AddCluster" Color="@Color.Success" Class="add-item-btn">Add</MudButton>
                    <MudButton OnClick="@DeleteSelectedCluster" Color="@Color.Error" Class="add-item-btn">Delete</MudButton>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <Columns>
                    <SelectColumn T="Cluster" />
                    <PropertyColumn Property="x => x.Name" Title="@DataUtils.ClusterNameLabel" CellStyle="width: 30%;" Sortable="true" Editable="false" />
                    <PropertyColumn Property="x => x.Description" Title="@DataUtils.ClusterDescrLabel" CellStyle="width: 60%;" Sortable="true" Editable="false" />
                    <TemplateColumn CellStyle="width: 5%;">
                        <EditTemplate>
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="(() => DeleteCluster(context.Item.MetaInfo.ID))" />
                        </EditTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="Cluster" />
                </PagerContent>
            </MudDataGrid>
        </div>
    }
    @if (isHiddenMainPanel && currentCluster != null)
    {
        <ClusterEdit CurrentCluster="@currentCluster" Fields="@fieldList" OnUpdate="@ShowMainPanel" CartographicReference="@_cartographicReference" ClusterReference="@_clusterReference" />
    }
</MudUnitAndReferenceChoiceTag>

@code {
    // Cluster related variables
    private List<Cluster> clusterList = new();
    private List<Cluster> selectedClusterList = new();
    private Cluster? currentCluster;

    private List<Field> fieldList = new();

    // Slot related variables
    // UI related variables
    public bool isHiddenMainPanel;
    public bool isHiddenEditPanel;
    private string? _searchString;

    private CartographicReference _cartographicReference = new CartographicReference() { CartographicGridNorthPositionReference = 0, CartographicGridEastPositionReference = 0 };
    private ClusterReference _clusterReference = new ClusterReference() { ClusterNorthPositionReference = 0, ClusterEastPositionReference = 0 };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Show main panel
            isHiddenMainPanel = false;
            isHiddenEditPanel = true;
            currentCluster = null;

            // Starting all loading tasks asynchronously
            logger.LogInformation("Trying to load list of Cluster from client: " + APIUtils.HostNameCluster);
            var clusterTask = APIUtils.ClientCluster.GetAllClusterAsync();
            var fieldTask = APIUtils.ClientField.GetAllFieldAsync();

            List<Task> loadingTaskList = new List<Task> { clusterTask, fieldTask };

            // Awaiting tasks and retrieve results as they become available
            while (loadingTaskList.Count > 0)
            {
                Task finishedTask = await Task.WhenAny(loadingTaskList);
                if (finishedTask == clusterTask)
                {
                    try
                    {
                        var clusters = (List<Cluster>)await clusterTask; // awaiting the finished task allows to retrieve its result and throw exception if needed
                        // remove the single wells
                        clusterList ??= new List<Cluster>();
                        clusterList.Clear();
                        foreach (Cluster cluster in clusters)
                        {
                            if (!cluster.IsSingleWell)
                            {
                                clusterList.Add(cluster);
                            }
                        }
                        if (clusterList != null)
                        {
                            clusterList.Sort((t1, t2) => t1.Name.CompareTo(t2.Name));
                        }
                        else
                        {
                            logger.LogWarning("Returned list of Cluster were null on initialization");
                            Snackbar.Add("Returned list of Cluster were null on initialization", Severity.Warning);
                        }
                    }
                    catch (ApiException ex)
                    {
                        logger.LogError(ex, "Impossible to load Cluster from client");
                    }
                }
                else if (finishedTask == fieldTask)
                {
                    try
                    {
                        fieldList = (List<Field>)await fieldTask; // awaiting the finished task allows to retrieve its result and throw exception if needed
                        if (fieldList != null)
                        {
                            fieldList.Sort((t1, t2) => t1.Name.CompareTo(t2.Name));
                        }
                        else
                        {
                            logger.LogWarning("Returned list of fields were null on initialization");
                            Snackbar.Add("Returned list of fields was null on initialization", Severity.Warning);
                        }
                    }
                    catch (ApiException ex)
                    {
                        logger.LogError(ex, "Impossible to load fields from client");
                    }
                }
                loadingTaskList.Remove(finishedTask);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Problem Cluster initialization");
        }
        await InvokeAsync(() => { StateHasChanged(); });
    }

    private void UpdatePositionReference(string newPositionReference)
    {
    }

    private async Task AddCluster()
    {
        try
        {
            MetaInfo metaInfo = new() { ID = Guid.NewGuid(), HttpHostName = APIUtils.HostNameCluster, HttpHostBasePath = APIUtils.HostBasePathCluster, HttpEndPoint = "Cluster/" };
            DateTimeOffset creationDate = DateTimeOffset.UtcNow;
            Cluster currentCluster = new()
            {
                MetaInfo = metaInfo,
                Name = DataUtils.DEFAULT_NAME_Cluster,
                Description = DataUtils.DEFAULT_DESCR_Cluster,
                CreationDate = creationDate,
                LastModificationDate = creationDate,

            };
            await APIUtils.ClientCluster.PostClusterAsync(currentCluster);
            await OnInitializedAsync();
            // Find the newly created datum in the refreshed list
            var addedCluster = clusterList.FirstOrDefault(d => d.MetaInfo?.ID == currentCluster.MetaInfo?.ID);
            if (addedCluster != null)
            {
                logger.LogInformation("Cluster posted successfully");
                Snackbar.Add("Cluster posted successfully", Severity.Success);
                await RowClicked(new DataGridRowClickEventArgs<Cluster>(new MouseEventArgs(), addedCluster, -1));
            }
            else
            {

                logger.LogError("Could not retrieve the added Cluster");
                Snackbar.Add("Could not retrieve the added Cluster", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to add a new Cluster");
            Snackbar.Add("Impossible to add a new Cluster", Severity.Warning);
        }
    }

    private async Task RowClicked(DataGridRowClickEventArgs<Cluster> args)
    {
        await EditCluster(args.Item.MetaInfo.ID);
    }

    private async Task EditCluster(Guid id)
    {
        try
        {
            currentCluster = await APIUtils.ClientCluster.GetClusterByIdAsync(id);
            if (currentCluster != null)
            {
                isHiddenMainPanel = true;
                isHiddenEditPanel = false;
                await InvokeAsync(() => { StateHasChanged(); });
            }
            else
            {
                logger.LogWarning("Impossible to load Cluster");
                Snackbar.Add("Impossible to load Cluster", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to load Cluster to be edited");
        }
    }

    private async Task DeleteCluster(Guid id)
    {
        try
        {
            await APIUtils.ClientCluster.DeleteClusterByIdAsync(id);
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to delete Cluster");
        }
    }

    private async Task DeleteSelectedCluster()
    {
        try
        {
            foreach (Cluster cluster in selectedClusterList)
            {
                await APIUtils.ClientCluster.DeleteClusterByIdAsync(cluster.MetaInfo.ID);
            }
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Impossible to delete all Cluster");
        }

    }

    //Quick filter - filter gobally across multiple columns with the same input
    private Func<Cluster, bool>
    _clusterFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if ($"{x.Name} {x.Description}".Contains(_searchString))
            return true;

        return false;
    };

    //Events
    private void StartedEditingItem(Cluster item)
    {
        //Activating Edit event capture with parameter StartedEditingItem="@StartedEditingItem" in MudDataGrid; arguments are specified in OnClick="@context.Actions.StartedEditingItem(...)"
    }

    private void CancelledEditingItem(Cluster item)
    {
        //Activating Cancel event capture with parameter CancelledEditingItem = "@CancelledEditingItem" in MudDataGrid; arguments are specified in OnClick="@context.Actions.CancelledEditingItem(...)"
    }

    private void CommittedItemChanges(Cluster item)
    {
        //Activating Commit event capture with parameter CommittedItemChanges = "@CommittedItemChanges" in MudDataGrid; arguments are specified in OnClick="@context.Actions.CommittedEditingItem(...)"
    }

    void SelectedItemsChanged(HashSet<Cluster>
        items)
    {
        selectedClusterList.Clear();
        selectedClusterList.InsertRange(0, items);
    }

    private async void ShowMainPanel()
    {
        isHiddenMainPanel = false;
        isHiddenEditPanel = true;
        await OnInitializedAsync();
    }
}
